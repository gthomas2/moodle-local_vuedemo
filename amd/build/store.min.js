"use strict";function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=new Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function ownKeys(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(b){return Object.getOwnPropertyDescriptor(a,b).enumerable})),c.push.apply(c,d)}return c}function _objectSpread(a){for(var b=1;b<arguments.length;b++){var c=null!=arguments[b]?arguments[b]:{};b%2?ownKeys(Object(c),!0).forEach(function(b){_defineProperty(a,b,c[b])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(c)):ownKeys(Object(c)).forEach(function(b){Object.defineProperty(a,b,Object.getOwnPropertyDescriptor(c,b))})}return a}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}define([],function(){return{initStore:function(a){var b=new a.Store({state:{columns:[{id:1,title:"TODO",tickets:[{id:1,title:"Evaluate webpack",description:"Blah blah..."},{id:3,title:"Send David presentation",description:"By telegram or email"}]},{id:2,title:"In Progress",tickets:[{id:2,title:"Publish to github",description:"Get your work done!"}]}]},mutations:{moveTicket:function(a,b){var c=b.ticketId,d=b.columnId,e=a.columns.filter(function(a){return a.tickets.filter(function(a){return a.id===c}).length})[0],f=e.tickets.filter(function(a){return a.id===c})[0],g=a.columns.map(function(a){return _objectSpread({},a,{tickets:a.tickets.filter(function(a){return a.id!==c})})}).map(function(a){return a.id===d?_objectSpread({},a,{tickets:[].concat(_toConsumableArray(a.tickets),[f])}):a});a.columns=g},addColumn:function(a,b){a.columns=[].concat(_toConsumableArray(a.columns),[b])}},actions:{moveTicket:function(a,b){a.commit("moveTicket",b)}}});return b}}});